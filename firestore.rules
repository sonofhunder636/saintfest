rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Users collection - users can read/write their own data, admins can read all
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow read: if isAdmin();
    }
    
    // Saints collection - admins can read/write, public can read via API only
    match /saints/{saintId} {
      allow read, write, create, delete: if isAdmin();
      // Public reads are handled via API endpoints with proper data filtering
      allow read: if false;
    }
    
    // Brackets collection - admins can read/write, public can read
    match /brackets/{bracketId} {
      allow read, write, create, delete: if isAdmin();
      allow read: if true; // Public can view brackets
    }
    
    // Polls collection - admins can create/manage, authenticated users can read/vote
    match /polls/{pollId} {
      allow read: if true; // Anyone can read polls
      allow create, update, delete: if isAdmin();
    }
    
    // Votes collection - authenticated users can create their own votes, admins can read all
    match /votes/{voteId} {
      allow create: if isAuthenticated() && request.auth.uid == resource.data.userId;
      allow read, update: if isAuthenticated() && request.auth.uid == resource.data.userId;
      allow read, write, delete: if isAdmin();
    }
    
    // Comments collection - authenticated users can create/manage their own, admins can moderate
    match /comments/{commentId} {
      allow read: if true; // Anyone can read comments
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
      allow update, delete: if isAuthenticated() && request.auth.uid == resource.data.userId;
      allow write, delete: if isAdmin(); // Admins can moderate
    }
    
    // Categories collection - read-only for public, admins can manage
    match /categories/{categoryId} {
      allow read: if true;
      allow write, create, delete: if isAdmin();
    }
    
    // Game years collection - read-only for public, admins can manage
    match /gameYears/{yearId} {
      allow read: if true;
      allow write, create, delete: if isAdmin();
    }
    
    // Default deny all other documents
    match /{document=**} {
      allow read, write: if false;
    }
  }
}