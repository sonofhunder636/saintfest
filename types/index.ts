// types/index.ts

export interface User {
  id: string;
  email: string;
  displayName: string;
  photoURL?: string;
  role: 'admin' | 'user';
  createdAt: Date;
  lastLoginAt: Date;
}

export interface Saint {
  id: string;
  name: string;
  saintfestAppearance?: number;
  hagiography?: string;
  birthYear?: number;
  deathYear?: number;
  origin?: string;
  locationOfLabor?: string;
  tags?: string;
  
  // Boolean category flags from spreadsheet (exact column names)
  eastern?: boolean;
  western?: boolean;
  evangelist?: boolean;
  martyrs?: boolean;
  confessors?: boolean;
  doctorsofthechurch?: boolean;
  virgins?: boolean;
  holywoman?: boolean;
  mystic?: boolean;
  convert?: boolean;
  blessed?: boolean;
  venerable?: boolean;
  missionary?: boolean;
  deacon?: boolean;
  priest?: boolean;
  bishop?: boolean;
  cardinal?: boolean;
  pope?: boolean;
  apostle?: boolean;
  abbotabbess?: boolean;
  hermit?: boolean;
  royalty?: boolean;
  religious?: boolean;
  lay?: boolean;
  groupcompanions?: boolean;
  churchfather?: boolean;
  oldtestament?: boolean;
  
  // Legacy fields for backwards compatibility
  feastDay?: string;
  categories?: string[];
  canonizationDate?: Date;
  canonizationReason?: string;
  historicalStory?: string;
  imageUrl?: string;
  patronOf?: string[];
  
  // New tournament fields
  popularityScore?: number; // 1-100 for weighted selection
  lastUsedYear?: number; // Track when saint was last used in tournament
  displayName?: string; // Optimized name for bracket display
  miracles?: string[];
  birthPlace?: string;
  
  // Tournament participation tracking
  participatedIn2024?: boolean;
  
  createdAt: Date;
  updatedAt: Date;
}

export interface Category {
  id: string;
  name: string;
  description: string;
  color: string; // Hex color for theming
  iconName?: string; // Lucide icon name
  createdAt: Date;
}

export interface Poll {
  id: string;
  title: string;
  description?: string;
  type: 'single' | 'multiple' | 'ranked';
  options: PollOption[];
  createdBy: string; // User ID
  createdAt: Date;
  expiresAt?: Date;
  isActive: boolean;
  categoryId?: string;
  allowComments: boolean;
  showResultsLive: boolean;
  maxSelections?: number; // For multiple choice
  imageUrl?: string;
  tags: string[];
  round?: 'round1' | 'round2' | 'semifinals' | 'finals'; // For bracket tracking
}

export interface PollOption {
  id: string;
  text: string;
  saintId?: string; // Reference to saint if applicable
  imageUrl?: string;
  description?: string;
}

export interface Vote {
  id: string;
  userId: string;
  pollId: string;
  selectedOptions: string[]; // Array of option IDs
  rankings?: { optionId: string; rank: number }[]; // For ranked choice
  createdAt: Date;
  updatedAt?: Date;
}

export interface Comment {
  id: string;
  userId: string;
  pollId: string;
  content: string;
  createdAt: Date;
  updatedAt?: Date;
  parentCommentId?: string; // For threaded comments
  likes: number;
  likedBy: string[]; // User IDs who liked this comment
}

export interface GameYear {
  year: number;
  selectedSaints: string[]; // Array of saint IDs used this year
  categories: string[]; // Categories used this year
  bracketId?: string;
  isActive: boolean;
  startDate: Date;
  endDate?: Date;
}

// ============================================================================
// NEW TOURNAMENT BRACKET SYSTEM - Clean Architecture
// ============================================================================

export interface Tournament {
  id: string;
  year: number;
  title: string; // "Saintfest 2025"
  categories: TournamentCategory[]; // Exactly 4 categories
  rounds: TournamentRound[]; // Exactly 5 rounds
  status: 'draft' | 'published' | 'active' | 'completed' | 'archived';
  createdAt: Date;
  publishedAt?: Date;
  completedAt?: Date;
  finalWinner?: TournamentSaint;
  colorPalette: TournamentColors;
  exportUrls?: {
    pdf?: string;
    png?: string;
    svg?: string;
  };
  autoGeneratedOn?: Date; // When auto-generated (August 1st)
  metadata: TournamentMetadata;
}

export interface TournamentCategory {
  id: string;
  name: string; // "Martyrs", "Doctors of the Church", etc.
  categoryKey: keyof Saint; // 'martyrs', 'doctorsofthechurch', etc.
  color: string; // Hex color for visual theming
  position: 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';
  saints: TournamentSaint[]; // Exactly 8 saints
}

export interface TournamentSaint {
  id: string; // Saint ID from database
  name: string;
  displayName: string; // Optimized for bracket display
  seed: number; // 1-8 within category
  imageUrl?: string;
  feastDay?: string;
  shortBio?: string;
  popularityScore: number; // 1-100 for selection weighting
  eliminated: boolean;
  eliminatedInRound?: number;
  advancedFromMatch?: string; // Match ID where they advanced
}

export interface TournamentRound {
  roundNumber: number; // 1-5
  roundName: 'Round of 32' | 'Round of 16' | 'Elite Eight' | 'Final Four' | 'Championship';
  matches: TournamentMatch[];
  startDate?: Date;
  endDate?: Date;
}

export interface TournamentMatch {
  id: string; // Unique match identifier
  roundNumber: number;
  matchNumber: number; // 1-16 for Round 1, 1-8 for Round 2, etc.
  saint1: TournamentSaint | null;
  saint2: TournamentSaint | null;
  winner?: TournamentSaint;
  votesForSaint1: number;
  votesForSaint2: number;
  totalVotes: number;
  pollId?: string; // Reference to voting poll
  scheduledDate?: Date;
  completedDate?: Date;
  position: MatchPosition;
  categoryAffiliation?: string; // For Round 1 matches
  nextMatchId?: string; // Where winner advances
  previousMatch1Id?: string; // Source matches for this match
  previousMatch2Id?: string;
  isLeftSide?: boolean; // Track which side of bracket (for March Madness layout)
  isChampionship?: boolean; // Special championship bracket with single saint display
}

export interface MatchPosition {
  x: number; // Horizontal position in pixels
  y: number; // Vertical position in pixels
  width: number; // Match box width
  height: number; // Match box height
  lineLength: number; // Length of connecting line
}

export interface TournamentColors {
  primary: string; // Main brand color
  secondary: string; // Accent color
  categories: string[]; // 4 colors for categories
  text: string; // Text color
  background: string; // Background color
  lines: string; // Bracket lines color
  hover: string; // Hover state color
}

export interface TournamentMetadata {
  totalSaints: number; // Should be 32
  categoriesUsed: string[];
  selectionMethod: 'random' | 'manual' | 'hybrid';
  generationTime: number; // Milliseconds
  textMeasurements: {
    longestName: string;
    maxTextWidth: number;
    maxTextHeight: number;
  };
  bracketDimensions: {
    totalWidth: number;
    totalHeight: number;
    scaleFactor: number;
  };
}

// Selection and generation configuration
export interface TournamentConfig {
  year: number;
  forcedCategories?: Array<keyof Saint>; // Admin override
  excludeRecentlyUsed: boolean;
  yearsToExclude: number; // Default 2 years
  colorPalette?: TournamentColors;
  selectionWeighting: 'popularity' | 'random' | 'balanced';
  textSizeCalculation: 'dynamic' | 'fixed';
  exportFormats: ('pdf' | 'png' | 'svg')[];
}

// Published bracket system for flattened, display-optimized data
export interface PublishedBracket {
  id: string;
  year: number;
  title: string; // "Saintfest 2025"
  publishedAt: Date;
  publishedBy: string; // User ID who published

  // Flattened display data
  matches: PublishedMatch[];
  categories: PublishedCategory[];
  dimensions: PublishedDimensions;
  connections: PublishedConnection[]; // Bracket connection lines
  colorPalette: TournamentColors; // Colors for consistent styling
  centerOverlay: PublishedCenterOverlay; // "Blessed Intercessor" text

  // Archive reference
  archiveId: string; // Reference to full Tournament backup

  // Status tracking
  isActive: boolean; // Is this the currently displayed bracket
}

export interface PublishedMatch {
  id: string;
  roundNumber: number;
  matchNumber: number;

  // Resolved saint data (no lookups needed)
  saint1Name: string | null;
  saint2Name: string | null;
  saint1Seed?: number;
  saint2Seed?: number;

  // Vote data (if completed)
  votesForSaint1: number;
  votesForSaint2: number;
  winnerId?: string;
  winnerName?: string;

  // Pre-calculated positioning (absolute pixels)
  position: {
    x: number;
    y: number;
    width: number;
    height: number;
  };

  // Display properties
  categoryAffiliation?: string;
  isLeftSide: boolean;
  isChampionship?: boolean;
}

export interface PublishedCategory {
  id: string;
  name: string; // "Martyrs", "Doctors of the Church"
  color: string;
  position: 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';

  // Pre-calculated label positioning
  labelPosition: {
    x: number;
    y: number;
    centerY: number;
    quadrantHeight: number;
  };

  // Saints for reference (display names only)
  saints: Array<{
    name: string;
    seed: number;
  }>;
}

export interface PublishedDimensions {
  // Original bracket dimensions
  totalWidth: number;
  totalHeight: number;

  // Responsive scaling factors
  scales: {
    desktop: number; // 1.0
    tablet: number;  // 0.75
    mobile: number;  // 0.5
  };

  // Container breakpoints
  breakpoints: {
    desktop: number; // px width when full scale
    tablet: number;  // px width when tablet scale
    mobile: number;  // px width when mobile scale
  };
}

export interface PublishedConnection {
  id: string;
  type: 'horizontal' | 'vertical';
  x1: number;
  y1: number;
  x2: number;
  y2: number;
  strokeWidth: number;
  color?: string; // Optional, falls back to colorPalette.lines
}

export interface PublishedCenterOverlay {
  text: string[]; // ["Blessed", "Intercessor"]
  x: number; // Center X position
  y: number; // Center Y position
  fontSize: number;
  fontFamily: string;
  color: string;
  opacity: number;
}

export interface TournamentArchive {
  id: string;
  originalTournamentId: string;
  archivedAt: Date;
  archivedBy: string;

  // Full tournament data for recovery
  tournamentData: Tournament;

  // Metadata
  reason?: string; // Why archived (published, backup, etc.)
  publishedBracketId?: string; // If this was published
}

// Text measurement and layout utilities
export interface TextMeasurement {
  width: number;
  height: number;
  fontSize: number;
  fontFamily: string;
  lineHeight: number;
}

export interface BracketLayout {
  totalWidth: number;
  totalHeight: number;
  roundSpacing: number;
  matchSpacing: number;
  categorySpacing: number;
  marginTop: number;
  marginBottom: number;
  marginLeft: number;
  marginRight: number;
}

// ============================================================================
// LEGACY BRACKET INTERFACES - Keep for backwards compatibility
// ============================================================================

export interface Bracket {
  id: string;
  year: number;
  title: string; // "Saintfest 2025"
  categories: BracketCategory[];
  rounds: BracketRound[];
  status: 'draft' | 'published' | 'active' | 'completed' | 'archived';
  createdAt: Date;
  publishedAt?: Date;
  finalWinner?: string; // Saint ID
  downloadUrl?: string; // URL to generated bracket PDF
  autoGeneratedOn?: Date; // When it was auto-generated (August 1st)
  exportUrls?: {
    pdf?: string;
    png?: string;
    svg?: string;
  };
}

export interface BracketCategory {
  id: string;
  name: string; // "Martyrs", "Confessors", etc.
  color: string; // Hex color for visual display
  position: 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';
  saints: BracketSaint[];
  categoryKey: keyof Saint; // 'martyrs', 'confessors', etc.
}

export interface BracketSaint {
  saintId: string;
  name: string;
  seed: number; // 1-8 position within category
  imageUrl?: string;
  eliminated?: boolean;
  eliminatedInRound?: number;
}

export interface BracketRound {
  roundNumber: number;
  roundName: string; // "Round 1", "Round 2", "Elite Eight", "Final Four", "Championship"
  matches: BracketMatch[];
}

export interface BracketMatch {
  matchId: string;
  saint1Id: string;
  saint2Id: string;
  saint1Name: string;
  saint2Name: string;
  winnerId?: string;
  winnerName?: string;
  pollId?: string; // Reference to the poll for this match
  votesForSaint1: number;
  votesForSaint2: number;
  matchDate?: Date; // When this match is/was held
  position: {
    x: number; // Horizontal position in bracket layout
    y: number; // Vertical position in bracket layout
  };
  categoryPosition?: 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right'; // For round 1 matches
}

export interface PollResults {
  pollId: string;
  totalVotes: number;
  results: {
    optionId: string;
    votes: number;
    percentage: number;
  }[];
  topVoters: {
    userId: string;
    displayName: string;
    voteCount: number;
  }[];
}

// API Response types
export interface ApiResponse<T> {
  success: boolean;
  data?: T;
  error?: string;
  message?: string;
}

// Form types
export interface CreatePollForm {
  title: string;
  description?: string;
  type: 'single' | 'multiple' | 'ranked';
  options: { text: string; saintId?: string; imageUrl?: string }[];
  expiresAt?: Date;
  categoryId?: string;
  allowComments: boolean;
  showResultsLive: boolean;
  maxSelections?: number;
  tags: string[];
}

export interface CreateSaintForm {
  name: string;
  feastDay: string;
  categories: string[];
  canonizationReason: string;
  historicalStory: string;
  imageUrl?: string;
  patronOf?: string[];
  miracles?: string[];
  birthYear?: number;
  deathYear?: number;
  birthPlace?: string;
}

// Daily Tournament Post types
export interface DailyPost {
  id: string;
  title: string;
  content: string; // Rich text content
  publishDate: Date;
  isPublished: boolean;
  matchup: {
    saint1Id: string;
    saint2Id: string;
    description?: string;
  };
  pollId?: string; // Reference to associated poll
  previousWinner?: {
    saintId: string;
    votesFor: number;
    votesAgainst: number;
    percentage: number;
  };
  createdBy: string; // Admin user ID
  createdAt: Date;
  updatedAt: Date;
  scheduledFor?: Date; // Auto-publish time
  bracketRound: 'round1' | 'round2' | 'semifinals' | 'finals';
  dayNumber: number; // 1-30 for October
}

// BlogPost interface with additional properties expected by components
export interface BlogPost extends DailyPost {
  author?: string;
  tags?: string[];
  categories?: string[];
  status?: 'draft' | 'published' | 'scheduled';
  excerpt?: string;
  slug?: string;
  publishedAt?: Date;
  scheduledFor?: Date;
  scheduledAt?: Date;
  featuredImage?: string;
  featured?: boolean;
  votingPost?: boolean;
  selectedMatchId?: string;
  priority?: 'low' | 'medium' | 'high';
  seoTitle?: string;
  seoDescription?: string;
  views?: number;
  likes?: number;
  comments?: number;
  metadata?: {
    wordCount?: number;
    readingTime?: number;
  };
}

export interface VotingSession {
  id: string;
  postId: string;
  pollId: string;
  opensAt: Date; // Start of voting window
  closesAt: Date; // End of voting window (midnight CT)
  isActive: boolean;
  totalVotes: number;
  results?: {
    saint1Votes: number;
    saint2Votes: number;
    saint1Percentage: number;
    saint2Percentage: number;
    winnerId: string;
  };
}

// Simple vote tracking with cookies
export interface SimpleVote {
  id: string;
  sessionId: string; // VotingSession ID
  saintId: string; // Which saint they voted for
  voterHash: string; // Hash of IP + User Agent for basic deduplication
  timestamp: Date;
}

// Bracket Management Types
export interface BracketGenerationConfig {
  year: number;
  selectedCategories: Array<keyof Saint>; // 4 categories from Saint boolean flags
  excludeRecentlyUsed: boolean; // Exclude saints used in last 1-3 years
  colorPalette: BracketColorPalette;
}

export interface BracketColorPalette {
  primary: string; // Mint green #8FBC8F
  category1: string;
  category2: string;
  category3: string;
  category4: string;
  accent: string;
  text: string;
  background: string;
}

export interface BracketEditAction {
  type: 'swap-category' | 'swap-saint' | 'regenerate-category';
  categoryId?: string;
  saintId?: string;
  newCategoryKey?: keyof Saint;
  newSaintId?: string;
}

export interface YearlyBracketSchedule {
  id: string;
  year: number;
  autoGenerateDate: Date; // August 1st
  publishDate: Date; // September (user-set)
  saintfestStartDate: Date; // October 1st
  saintfestEndDate: Date; // October 31st
  archiveDate: Date; // After winner announced
  isActive: boolean;
  bracketId?: string;
}

export interface BracketArchive {
  id: string;
  year: number;
  bracketId: string;
  finalWinner: {
    saintId: string;
    name: string;
    imageUrl?: string;
  };
  totalVotes: number;
  archivedAt: Date;
  downloadUrl: string; // PDF download link
}

// Utility types for real-time updates
export interface RealtimeVoteUpdate {
  pollId: string;
  optionId: string;
  newVoteCount: number;
  totalVotes: number;
  percentage: number;
}